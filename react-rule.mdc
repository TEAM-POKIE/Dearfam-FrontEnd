Description: This rule describes the React project structure, conventions, technology stack, and architecture guidelines for the application.

# React Project Structure and Conventions

## ÔøΩÔøΩ Folder Structure

- **assets/**: Static files (images, icons, fonts)
- **components/**: Reusable UI components (buttons, modals, input fields)
- **features/**: Domain-specific components and state management
- **hooks/**: Custom React hooks (useAuth.ts, useDebounce.ts)
- **lib/**:
  - **api/**: API request handling (axios configuration)
  - **store/**: Global state management (Zustand)
  - **validation/**: Input validation logic (Zod)
- **utils.ts**: Common utility functions
- **pages/**: Individual page components
- **presenters/**: Business logic handlers (separating business logic from UI)
- **viewmodels/**: State and UI data management (connecting View and Model)
- **views/**: UI components that receive data from Presenters or ViewModels

## üîß Technology Stack

- **Build Tool**: Vite
- **State Management**: Zustand
- **Server State**: TanStack Query (React Query)
- **Form Management**: React Hook Form with Zod validation
- **CSS**: Tailwind CSS with shadcn/ui components

## üìè Architecture Guidelines

### Component Architecture
```
views/ (UI components)
‚Üì
viewmodels/ (UI state management)
‚Üì
presenters/ (business logic)
‚Üì
lib/api/ (API calls)
lib/store/ (global state)
```

### Best Practices

1. **Separation of Concerns**:
   - UI components should not contain direct API calls
   - Business logic belongs in presenters
   - State management should be handled by viewmodels

2. **Component Structure**:
   - Keep components small and focused
   - Use composition over inheritance
   - Implement proper prop typing

3. **State Management**:
   - Use Zustand for global application state
   - Use TanStack Query for server state
   - Keep local state in components when appropriate

4. **Form Handling**:
   - Implement React Hook Form for form state
   - Use Zod schemas for validation
   - Extract complex form logic to custom hooks

5. **Styling**:
   - Use Tailwind utility classes
   - Leverage shadcn/ui components
   - Maintain consistent styling patterns 